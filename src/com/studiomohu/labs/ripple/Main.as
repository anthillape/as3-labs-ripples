package com.studiomohu.labs.ripple{	import com.studiomohu.labs.generic.LabsRadio;	import com.studiomohu.labs.generic.LabsCheckbox;	import com.studiomohu.labs.generic.LabsColors;	import com.studiomohu.labs.generic.LabsConstants;	import com.studiomohu.labs.generic.LabsSlider;	import com.studiomohu.labs.generic.LabsSurround;	import flash.display.StageQuality;	import flash.events.Event;		import com.studiomohu.core.util.Spy;		import com.studiomohu.core.util.SetupDefault;		import flash.display.Sprite;	/**	 * @author arthurcomben	 */	public class Main extends Sprite 	{		private var content : Sprite;		private var spy : Sprite;		private var surround : LabsSurround;		private var cols : int = 40;		private var rows : int = 25;		private var buffA : Array;		private var buffB : Array;		private var grid : Grid;		private const boxSize : int = 14;		private const boxSpacing : int = 0;				private const dampen : Number = .98;				public var _type : String;						public function Main ()		{			SetupDefault.setup( stage );						addEventListener( Event.ADDED_TO_STAGE, handleAddedToStage );		}		private function handleAddedToStage (event : Event) : void		{			init( );		}		private function init () : void		{			content = new Sprite( );			spy = new Sprite( );			surround = new LabsSurround( );						addChild( content );			addChild( spy );			addChild( surround );						Spy.registerOverlay( spy, 0, 0, 1, 1 );						grid = new Grid( );						content.addChild( grid );						stage.quality = StageQuality.HIGH;			Spy.registerOverlay( spy, .1, .1, .8, .8 );						surround.init( "Ripple" );						_type = GridItem.CIRCLE_SIZE;						//var focusSlider : LabsSlider = new LabsSlider( "focal depth", varsVO, "focalDepth", 100, 500 );			//surround.getControlPanel( ).getPanel( ).addChild( focusSlider );						var radioA : LabsRadio = new LabsRadio("Circle Size", GridItem.CIRCLE_SIZE, "type", this, "type" );			surround.getControlPanel( ).getPanel( ).addChild( radioA );						var radioB : LabsRadio = new LabsRadio("Ellipse Direction", GridItem.DIRECTION, "type", this, "type" );			surround.getControlPanel( ).getPanel( ).addChild( radioB );						var radioC : LabsRadio = new LabsRadio("Alpha Square", GridItem.ALPHA_SQUARE, "type", this, "type" );			surround.getControlPanel( ).getPanel( ).addChild( radioC );						radioB.y = radioA.height;			radioC.y = radioB.y + radioB.height;					}				public function get type() : String		{			return this._type;		}		public function set type( s : String ) : void		{			this._type = s;			resetVisualistation();		}		private function resetVisualistation() : void		{			clearVisualisation();						grid.init( boxSize, boxSpacing, cols, rows, LabsColors.COLORED, 1, type );			setupRipple( );			grid.x = int( LabsConstants.WIDTH / 2 - grid.width / 2 );			grid.y = int( LabsConstants.HEIGHT / 2 - grid.height / 2 );			loop( null );			grid.addEventListener( GridEvent.HIT, onGridHit, false, 0, true );			this.addEventListener( Event.ENTER_FRAME, loop, false, 0, true );					}				private function clearVisualisation() : void		{			grid.clear();			grid.removeEventListener( GridEvent.HIT, onGridHit );			this.removeEventListener( Event.ENTER_FRAME, loop );		}		private function setupRipple () : void		{			buffA = new Array( );			buffB = new Array( );						var tempArrA : Array;			var tempArrB : Array;						var i : int = 0;			var j : int = 0;			for (; i < cols ; i++)			{				j = 0;				tempArrA = new Array( );				tempArrB = new Array( );				for(; j < rows ; j++)				{					tempArrA.push( 0 );					tempArrB.push( 0 );				}				buffA.push( tempArrA );				buffB.push( tempArrB );			}		}				private function onGridHit ( e : GridEvent ) : void		{			buffA[e.x][e.y] = 1;		}		private function loop ( e : Event ) : void		{			var i : int = 0;			var j : int;						for (; i < cols ; i++)			{				j = 0;				for(; j < rows ; j++)				{					var a : Number;					var t : Number;					var b : Number;					var l : Number;					var r : Number;										var borderValue : Number = 0;										if( i == 0 )					{						l = borderValue;					}					else					{						l = buffB[i - 1][j];					}										if( i == cols - 1 )					{						r = borderValue;					}					else					{						r = buffB[i + 1][j];					}										if( j == 0 )					{						t = borderValue;					}					else					{						t = buffB[i][j - 1];					}										if( j == rows - 1 )					{						b = borderValue;					}					else					{						b = buffB[i][j + 1];					}										a = ( t + b + l + r ) * .5 - buffA[i][j]					a = a * dampen;					buffA[i][j] = a;										var grey : Number = a / 2 + .5; // makes gray the middle number					var tan : Number = Math.atan( grey ) / ( Math.PI / 2 ); // make numbers tend infinitely towards 1										grid.setPixel( i, j, tan );				}			}			var buffT : Array = buffB;			buffB = buffA;			buffA = buffT;			buffT = null;		}	}}